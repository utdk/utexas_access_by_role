<?php

/**
 * @file
 * Node Access by Role.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\user\RoleInterface;
use Drupal\Core\Entity\EntityInterface;

use Drupal\utexas_node_access_by_role\EntityTypeInfo;
use Drupal\utexas_node_access_by_role\Form\NodeFormAlterations;


/**
 * Implements hook_node_access_records().
 */
function utexas_node_access_by_role_node_access_records(NodeInterface $node) {
  // 1. Get any roles that currently have permission to bypass the node-based restriction.
  $bypassing_roles = \Drupal::service('utexas_node_access_by_role.helper')->getBypassingRoles();
  if (!empty(array_keys($bypassing_roles))) {
    foreach (array_keys($bypassing_roles) as $bypasser) {
      $grants[] = [
        'realm' => 'utexas_node_access_by_role',
        'gid' => crc32($bypasser),
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'langcode' => 'en',
      ];
    }
  }
  // Check if the node has enabled role-based restrictions.
  if ($node->hasField('utexas_node_access_by_role_enable')) {
    $enabled = $node->get('utexas_node_access_by_role_enable')->getValue();
    if (!$enabled) {
      // This node has no role restrictions. Explicitly mark it as being allowed within the
      // utexas_node_access_by_role realm (other realms can still control).
      $grants[] = [
        'realm' => 'utexas_node_access_by_role',
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'langcode' => 'en',
      ];
      return $grants;
    }
  }

  // 1. Retrieve node-specific role restrictions based on the base field.
  if ($node->hasField('utexas_node_access_by_role_roles') && !$node->get('utexas_node_access_by_role_roles')->isEmpty()) {
    // Create a node-ID-specific list of roles granted access to this account.
    foreach (array_values($node->get('utexas_node_access_by_role_roles')->getValue()) as $value) {
      \Drupal::logger('mymodule')->notice(serialize($value));
      if (in_array($value['target_id'], array_keys($bypassing_roles))) {
        // This array check is to prevent duplicate entries.
        continue;
      }
      // Set grants based on an integer-equivalent of the role ID.
      $grants[] = [
        'realm' => 'utexas_node_access_by_role',
        'gid' => crc32($value['target_id']),
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'langcode' => 'en',
      ];
    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function utexas_node_access_by_role_node_grants(AccountInterface $account, $op) {
  // Send a list of the current user's roles to the system so they can be checked against
  // the node's allowed roles in hook_node_records(), above.
  foreach ($account->getRoles() as $role) {
    // Create a unique, constant integer representation of the machine name of the role.
    $rids[] = crc32($role);
  }
  // @todo if the anonymous role has access to view published pages...
  // Add anonymous user role.
  $rids[] = 0;

  if ($op == 'view') {
    // This is simply a list of the *current* user's roles.
    // Checking happens via hook_node_records.
    $grants['utexas_node_access_by_role'] = $rids;
    return $grants;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function utexas_node_access_by_role_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Register a new base field for all entity types.
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function utexas_node_access_by_role_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Modify node forms in Drupal\utexas_node_access_by_role\Form.
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(NodeFormAlterations::class)
    ->nodeFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function utexas_node_access_by_role_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Modify node type *edit* forms in Drupal\utexas_node_access_by_role\Form.
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(NodeFormAlterations::class)
    ->nodeTypeFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function utexas_node_access_by_role_form_node_type_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Modify node type *add* forms in Drupal\utexas_node_access_by_role\Form.
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(NodeFormAlterations::class)
    ->nodeTypeFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_link_alter().
 *
 * See utexas.profile::utexas_link_alter.
 */
function utexas_node_access_by_role_link_alter(&$variables) {
  /** @var \Drupal\utexas_node_access_by_role\MenuLinkTreeManipulator $menu_link_manipulator */
  $menu_link_manipulator = \Drupal::service('menu.default_tree_manipulators');

  if ($menu_link_manipulator->isRoleRestrictedNode($variables['url'])) {
    if (isset($variables['options']['attributes']['class']) && !is_array($variables['options']['attributes']['class'])) {
      // Avoid casting to a class as a string,
      // such as in redirect/-/blob/8.x-1.x/redirect.module#L375.
      $variables['options']['attributes']['class'] = explode(',', $variables['options']['attributes']['class']);
    }
    if (!isset($variables['options']['attributes']['class'])) {
      $variables['options']['attributes']['class'] = [];
    }
    // Remove the 'access-protected' class.
    $variables['options']['attributes']['class'] = array_diff($variables['options']['attributes']['class'], ['access-protected']);
    // Add the lock icon.
    $variables['options']['attributes']['class'][] = 'ut-cta-link--lock';
    $variables['options']['attributes']['class'][] = 'ut-link';
  }
}

/**
 * Implements hook_entity_update().
 */
function utexas_node_access_by_role_entity_update(EntityInterface $entity) {
  if ($entity instanceof RoleInterface) {
    node_access_rebuild();
  }
}

/**
 * Implements hook_entity_insert().
 */
function utexas_node_access_by_role_entity_insert(EntityInterface $entity) {
  if ($entity instanceof RoleInterface) {
    if ($entity instanceof RoleInterface) {
      node_access_rebuild();
    }
  }
}

